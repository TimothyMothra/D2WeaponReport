@model SandboxWeb.Models.HomeViewModel

@{
    ViewData["Title"] = "WeaponReport";
}

@*// Razor Syntax: https://www.tutorialsteacher.com/mvc/razor-syntax*@

<div>
    Examples:
    <ul>
        <li><a href="~/Home/Index/1622998472">Vulpecula</a></li>
        <li><a href="~/Home/Index/2891672170">Xenoclast IV</a></li>
        <li><a href="~/Home/Index/821154603">Gnawing Hunger</a></li>
        <li><a href="~/Home/Index/3654674561">Dead Man's Tale</a></li>
        <li><a href="~/Home/Index/3856705927">Hawkmoon</a></li>
    </ul>
</div>

@*Search by Name or Id*@
@*<div class="autoComplete_wrapper">
        <input id="autoComplete" type="search" dir="ltr" spellcheck=false autocorrect="off" autocomplete="off" autocapitalize="off" tabindex="1">
    </div>*@
<div class="ui-widget">
    <label for="tags">Search for Weapon by Name or ID: </label>
    <br />
    <input id="autoComplete">
    <input type="button" value="Search" name="no" onclick="ButtonClick_Search()" @*tabindex="2"*@>
</div>

<p id="weaponNames" style="display:none">
    @Html.DisplayFor(x => x.WeaponNamesForAutoComplete)
</p>

@*Display Error*@
@if (this.Model.ErrorMessage != null)
{
    <p>
        @Html.DisplayFor(x => x.ErrorMessage)
    </p>
}

@*Display Multiple Search Results*@
@if (this.Model.MultipleSearchResults != null)
{
    <p>
        Multiple results found:
    </p>

    <ul>
        @foreach (var result in this.Model.MultipleSearchResults)
        {
            <li>
                <img src="@Html.Raw(result.IconUri)" alt="icon" width="50" height="50">
                <a href="~/Home/Index/@Html.Raw(result.Id)">@Html.Raw(result.Id)</a> @Html.Raw(result.Name)
            </li>
        }
    </ul>
}


<script>
    // TODO: TYPESCRIPT
    function ButtonClick_Search() {
        var input = document.getElementById("autoComplete").value;
        console.log("test: " + input);

        window.location.href = "/Home/Index/" + input
    }

    var weaponNames = document.getElementById("weaponNames").innerText.split(',');
    console.log(weaponNames);


    $("#autoComplete").autocomplete({
        source: weaponNames
    });

    //// https://miroslavpopovic.com/posts/2012/06/jqueryui-autocomplete-filter-words-starting-with-term
    //// Overrides the default autocomplete filter function to
    //// search only from the beginning of the string
    //$.ui.autocomplete.filter = function (array, term) {
    //    var matcher = new RegExp("^" + $.ui.autocomplete.escapeRegex(term), "i");
    //    return $.grep(array, function (value) {
    //        return matcher.test(value.label || value.value || value);
    //    });
    //};


    //const autoCompleteJS = new autoComplete({
    //    selector: "#autoComplete",
    //    placeHolder: "Search for Weapon by Name or ID...",
    //    data: {
    //        src: weaponNames,
    //        cache: true,
    //    },
    //    resultsList: {
    //        element: (list, data) => {
    //            if (!data.results.length) {
    //                // Create "No Results" message element
    //                const message = document.createElement("div");
    //                // Add class to the created element
    //                message.setAttribute("class", "no_result");
    //                // Add message text content
    //                message.innerHTML = `<span>Found No Results for "${data.query}"</span>`;
    //                // Append message element to the results list
    //                list.prepend(message);
    //            }
    //        },
    //        noResults: true,
    //    },
    //    resultItem: {
    //        highlight: true
    //    },
    //    events: {
    //        input: {
    //            selection: (event) => {
    //                const selection = event.detail.selection.value;
    //                autoCompleteJS.input.value = selection;
    //            }
    //        }
    //    },
    //    searchEngine: "loose",
    //});

</script>


<hr />


@*WeaponDetails *@
@if (this.Model.WeaponDetails != null)
{
    <div>

        @*WeaponDetails Header: MetaData *@
        <div>
            <img src="@Html.Raw(this.Model.WeaponDetails.WeaponDefinition.MetaData.GetIconUri().AbsoluteUri)" alt="icon" width="50" height="50">
            <h2>@Html.Raw(this.Model.WeaponDetails.WeaponDefinition.MetaData.Name)</h2>
            <p class="text-muted">HashId: @Html.Raw(this.Model.WeaponDetails.WeaponDefinition.MetaData.HashId)</p>
            <p style="font-style:italic;">@Html.Raw(this.Model.WeaponDetails.WeaponDefinition.MetaData.FlavorText)</p>
            
            <p>
                @Html.Raw(this.Model.WeaponDetails.WeaponDefinition.MetaData.FrameName) @Html.Raw(this.Model.WeaponDetails.WeaponDefinition.MetaData.TypeName)
                <br />
                @Html.Raw(this.Model.WeaponDetails.WeaponDefinition.MetaData.FrameDescription)
            </p>
            
            <img class="img-fluid" src="@Html.Raw(this.Model.WeaponDetails.WeaponDefinition.MetaData.GetScreenshotUri().AbsoluteUri)" alt="screenshot">

            @*Hidden fields here are read by plotly library*@
            <p id="weaponName" style="display:none">@Html.DisplayFor(x => x.WeaponDetails.WeaponDefinition.MetaData.Name)</p>
            <p id="permutations" style="display:none">
                @Html.Raw(string.Join(",", this.Model.WeaponDetails.PerkPermutationAnalysisList.OrderByDescending(x => x.NetPoints).Select(x => x.NetPoints).AsEnumerable()))
            </p>

            @*Weapon Attributes*@
            <h3>Affected Attributes</h3>
            <div>
                @await Html.PartialAsync("_AffectedAttributes", this.Model.WeaponDetails.StatPermutationPercentiles)
            </div>

        </div>

        @*WeaponDetails Body: Perks *@
        <h3>Available Perks</h3>
        @foreach (var perkTable in this.Model.WeaponDetails.PerkTables)
        {
            <div>
                <p class="text-muted">@perkTable.TableDisplayName </p>

                <table>
                    <tr style="border: 1px solid white;">
                        <td></td> @*empty for icons*@
                        @foreach (var cell in perkTable.HeaderRow)
                        {
                            <td>@cell</td>
                        }
                    </tr>

                    @for (int i = 0; i < perkTable.Rows.Count; i++)
                    {
                        <tr style="border: 1px solid white;">
                            <td>
                                <img src="@Html.Raw(perkTable.IconUris[i])" alt="icon" width="50">
                            </td>

                            @foreach (var cell in perkTable.Rows[i])
                            {
                                <td>@cell</td>
                            }
                        </tr>
                    }
                </table>
            </div>

            <br />
        }

        <h3>Weapon Report</h3>
        @*WeaponDetails Body: Permutations *@
        
        <p>Number of Permutations @Html.DisplayFor(x => x.WeaponDetails.PerkPermutationAnalysisList.Count)</p>
        <div>
            <div id="plotDiv" style="width:400px;height:500px;"></div>

            <script lang="javascript">
                // https://github.com/plotly/plotly.js
                // https://plotly.com/javascript/box-plots/

                var weaponName = document.getElementById("weaponName").innerText;
                var permutations = document.getElementById("permutations").innerText.split(',');

                var data = [
                    {
                        type: 'box',
                        y: permutations,
                        name: '+/- points',
                        boxpoints: 'all',
                        jitter: 0.5,
                        whiskerwidth: 0.2,
                        fillcolor: 'cls',
                        marker: {
                            size: 2
                        },
                        line: {
                            width: 1
                        }
                    }
                ];

                var layout = {
                    title: "Distribution of Net Points",
                    hovermode: false,
                    clickmode: false,
                    dragmode: false,
                    yaxis: {
                        autorange: true,
                        fixedrange: true,
                        showgrid: true,
                        zeroline: true,
                        dtick: 5,
                        //gridcolor: 'rgb(255, 255, 255)',
                        gridwidth: 1,
                        zerolinecolor: 'rgb(255, 255, 255)',
                        zerolinewidth: 2
                    },
                    xaxis: {
                        fixedrange: true,
                    },
                    margin: {
                        l: 40,
                        r: 30,
                        b: 80,
                        t: 100
                    },
                    paper_bgcolor: 'rgb(243, 243, 243)',
                    plot_bgcolor: 'rgb(243, 243, 243)',
                    showlegend: false,
                };

                Plotly.newPlot('plotDiv', data, layout);
            </script>

            <p>
                Net Points: perk permutation (percentile grade).
                Grades: A = top 25%, B = second 25%, C = third 25%, D = bottom 25%
            </p>

            <div>
                @await Html.PartialAsync("_PermutationView", this.Model.WeaponDetails.PerkPermutationAnalysisList)
            </div>
        </div>
    </div>
}
